# SPDX-License-Identifier: Apache-2.0
#
# SPDX-FileCopyrightText: Â© 2025 Tenstorrent AI ULC

services:
  tt_studio_backend:
    container_name: tt_studio_backend_api
    # hostnames must not contain underscores
    hostname: tt-studio-backend-api
    image: ghcr.io/tenstorrent/tt-studio/backend:v0.0.0
    build: ./backend
    #* DEV: Uncomment devices to use Tenstorrent hardware
    # devices:
    #* mounts all tenstorrent devices to backend container
    # - /dev/tenstorrent:/dev/tenstorrent
    # note that `network_mode: host` does not work on mac OS
    networks:
      - tt_studio_network
    ports:
      - "8000:8000"
    command: gunicorn --workers 3 --bind 0.0.0.0:8000 --preload --timeout 1200 api.wsgi:application
    depends_on:
      tt_studio_chroma:
        condition: service_healthy
    stdin_open: true
    tty: true
    environment:
      # env vars are defined in .env file, use .env.default as template
      - CHROMA_DB_HOST=tt_studio_chroma
      - CHROMA_DB_PORT=8111
      - TT_STUDIO_ROOT
      - HOST_PERSISTENT_STORAGE_VOLUME
      - INTERNAL_PERSISTENT_STORAGE_VOLUME
      - BACKEND_API_HOSTNAME
      - JWT_SECRET
      - TAVILY_API_KEY
      - CLOUD_CHAT_UI_URL
      - CLOUD_CHAT_UI_AUTH_TOKEN
      - CLOUD_YOLOV4_API_URL
      - CLOUD_YOLOV4_API_AUTH_TOKEN
      - RAG_ADMIN_PASSWORD
      - CLOUD_SPEECH_RECOGNITION_URL
      - CLOUD_SPEECH_RECOGNITION_AUTH_TOKEN
      - CLOUD_STABLE_DIFFUSION_URL
      - CLOUD_STABLE_DIFFUSION_AUTH_TOKEN
      - CLOUD_SPEECH_RECOGNITION_URL
      - CLOUD_SPEECH_RECOGNITION_AUTH_TOKEN
      - GITHUB_USERNAME
      - GITHUB_PAT

    volumes:
      # mounting docker unix socket allows for backend container to run docker cmds
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HOST_PERSISTENT_STORAGE_VOLUME}:${INTERNAL_PERSISTENT_STORAGE_VOLUME}

    healthcheck:
      # On first application load resources for transformers/etc
      # are downloaded. The UI should not start until these resources
      # have been downloaded. Adjust timeout if on a very slow connection
      test: ["CMD", "curl", "-f", "http://localhost:8000/up/"]
      timeout: 120s
      interval: 10s
      retries: 5

  tt_studio_frontend:
    container_name: tt_studio_frontend
    hostname: tt-studio-frontend
    image: ghcr.io/tenstorrent/tt-studio/frontend:v0.0.0
    build: ./frontend
    depends_on:
      tt_studio_backend:
        condition: service_healthy
    networks:
      - tt_studio_network
    ports:
      - "3000:3000"
    environment:
      - VITE_ENABLE_DEPLOYED
      - VITE_APP_TITLE
      - VITE_ENABLE_RAG_ADMIN
      - VITE_TEST_AUDIO_URL
      - VITE_TEST_AUDIO_AUTH
    # command: sh
    command: bash -c "npm i && npm run dev"

  tt_studio_chroma:
    image: chromadb/chroma:0.5.3
    volumes:
      # Be aware that indexed data are located in "/chroma/chroma/"
      # Default configuration for persist_directory in chromadb/config.py
      # Read more about deployments: https://docs.trychroma.com/deployment
      - ${HOST_PERSISTENT_STORAGE_VOLUME}/chroma:/chroma/chroma
    command: "--workers 1 --host 0.0.0.0 --port 8111 --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30"
    environment:
      - IS_PERSISTENT=TRUE
      # - CHROMA_AUTH_TOKEN_TRANSPORT_HEADER=${CHROMA_AUTH_TOKEN_TRANSPORT_HEADER}
      # - PERSIST_DIRECTORY=${INTERNAL_PERSISTENT_STORAGE_VOLUME}/chroma
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["http://localhost:3000", "http://tt_studio_frontend", "http://localhost:8000"]
    restart: unless-stopped # possible values are: "no", always", "on-failure", "unless-stopped"
    ports:
      - "8111:8111"
    healthcheck:
      # Adjust below to match your container port
      test: ["CMD", "curl", "-f", "http://localhost:8111/api/v1/heartbeat"]
      interval: 10s
      timeout: 10s
      retries: 3
    container_name: tt_studio_chroma

    networks:
      - tt_studio_network

networks:
  tt_studio_network:
    # need external flag to allow for the backend to manage the docker network
    # otherwise, docker compose will create an app_* network for the backend container
    # to avoid colliding existing docker networks
    external: true
    name: tt_studio_network
