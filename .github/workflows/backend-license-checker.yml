name: Check SPDX Licenses

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    branches:
      - "main"
      - "staging"
    types:
      - opened
      - reopened
      - synchronize
      - assigned
      - review_requested

jobs:
  check-spdx-licenses:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5.0.0
        with:
          cache: "pip"
          python-version: "3.10"
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-spdx-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-spdx-
            
      - name: Install copyright check tool
        run: |
          pip install --upgrade pip
          pip install git+https://github.com/espressif/check-copyright.git@master
          
      - name: Check SPDX licenses
        id: check_spdx_licenses
        run: |
          set +e
          # Run the copyright check without config file - uses defaults
          python -m check_copyright --verbose --dry-run . > check_output.txt 2>&1
          exit_code=$?
          
          # Clean ANSI escape codes and save to environment
          clean_output=$(cat check_output.txt | sed 's/\x1b\[[0-9;]*m//g')
          echo "EXIT_CODE=$exit_code" >> $GITHUB_ENV
          
          # Save clean output to file for processing
          echo "$clean_output" > clean_output.txt
          echo "License check completed with exit code: $exit_code"
          
      - name: Extract files with missing licenses
        id: extract_files
        run: |
          python3 << 'EOF'
          import re
          import os
          
          # Read the clean output
          try:
              with open('clean_output.txt', 'r') as f:
                  content = f.read()
          except FileNotFoundError:
              print("No output file found")
              exit(0)
          
          # Extract files that failed copyright check
          files_with_issues = []
          
          # Look for patterns indicating missing license headers
          patterns = [
              r'Files which failed the copyright check:(.*?)(?=Additional information|$)',
              r'Some files are without a copyright note and a license header needs to be added:(.*?)(?=Additional information|$)'
          ]
          
          for pattern in patterns:
              matches = re.findall(pattern, content, re.DOTALL)
              for match in matches:
                  # Extract file paths starting with './'
                  file_paths = re.findall(r'^\s*(\./[^\s]+)', match, re.MULTILINE)
                  files_with_issues.extend(file_paths)
          
          # Remove duplicates and sort
          unique_files = sorted(list(set(files_with_issues)))
          
          # Write to environment variable
          if unique_files:
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write("FILES_WITH_ISSUES<<EOF\n")
                  f.write('\n'.join(unique_files) + '\n')
                  f.write("EOF\n")
              print(f"Found {len(unique_files)} files with missing licenses:")
              for file in unique_files:
                  print(f"  {file}")
          else:
              print("No files with missing licenses found")
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write("FILES_WITH_ISSUES=\n")
          EOF
          
      - name: Debug extracted files
        run: |
          if [ -n "$FILES_WITH_ISSUES" ]; then
            echo "Files with missing licenses:"
            echo "$FILES_WITH_ISSUES"
            echo "Total files: $(echo "$FILES_WITH_ISSUES" | wc -l)"
          else
            echo "No files with missing licenses found"
          fi
          
      - name: Comment on PR with missing licenses
        if: env.FILES_WITH_ISSUES != ''
        uses: actions/github-script@v7
        with:
          script: |
            const filesWithIssues = process.env.FILES_WITH_ISSUES;
            const issueNumber = context.issue.number || context.payload.pull_request?.number;
            
            if (!issueNumber) {
              console.log("No issue or PR number found, skipping comment");
              return;
            }
            
            if (filesWithIssues && filesWithIssues.trim()) {
              const fileList = filesWithIssues.trim().split('\n');
              const fileCount = fileList.length;
              
              const commentBody = `## 📋 SPDX License Check Results
              
            Our automated SPDX license verification has found **${fileCount} file(s)** missing license headers:

            \`\`\`
            ${filesWithIssues.trim()}
            \`\`\`

            ### ✅ Next Steps
            Please add a valid SPDX license identifier to each file. For example:
            \`\`\`
            # SPDX-License-Identifier: MIT
            # SPDX-FileCopyrightText: 2024 Your Organization
            \`\`\`

            This ensures proper licensing compliance. Thank you for your cooperation! 🙏`;
              
              try {
                await github.rest.issues.createComment({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
                console.log(`Comment posted for ${fileCount} files with missing licenses`);
              } catch (error) {
                console.error('Failed to post comment:', error);
              }
              
              // Set job as failed
              core.setFailed(`Found ${fileCount} files with missing SPDX license headers`);
            
      - name: Upload license check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spdx-license-check-results
          path: |
            check_output.txt
            clean_output.txt
          retention-days: 7
          
      - name: Final status
        run: |
          if [ -n "$FILES_WITH_ISSUES" ]; then
            file_count=$(echo "$FILES_WITH_ISSUES" | wc -l)
            echo "❌ License check failed: $file_count files missing SPDX license headers"
            exit 1
          else
            echo "✅ License check passed: All files have proper SPDX license headers"
            exit 0
          fi
