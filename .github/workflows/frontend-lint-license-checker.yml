name: Front-End Linter SPDX Licenses Checker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "main"
      - "staging"
    types:
      - opened
      - reopened
      - synchronize
      - assigned
      - review_requested

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' 
          cache: 'npm'  
          cache-dependency-path: 'app/frontend/package-lock.json'

      - name: Install dependencies
        working-directory: app/frontend  
        run: npm ci  

      # Single ESLint execution with comprehensive output capture
      - name: Run ESLint and Process Results
        working-directory: app/frontend  
        id: eslint_check
        run: |
          set +e
          
          # Run ESLint once and capture output
          echo "Running ESLint..."
          output=$(npm run lint --silent 2>&1)
          exit_code=$?
          
          echo "ESLint completed with exit code: $exit_code"
          echo "$output"
          
          # Clean ANSI escape codes
          clean_output=$(echo "$output" | sed 's/\x1b\[[0-9;]*m//g')
          echo "CLEAN_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$clean_output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Process output for errors and missing license headers
          grouped_errors=""
          current_file=""
          errors_for_file=""
          has_errors=false
          missing_lc_headers=false
          lc_flagged_files=""

          while IFS= read -r line; do
            # Detect file paths (lines starting with /)
            if echo "$line" | grep -q '^\s*\/'; then
              # Save previous file's errors if any
              if [ "$has_errors" = true ]; then
                grouped_errors+="$current_file\n$errors_for_file\n------------------------------------------------------------------------------------------------------------------------------------------\n"
                errors_for_file=""
                has_errors=false
              fi
              current_file=$(echo "$line" | sed 's/\n//g')
            # Detect error lines
            elif echo "$line" | grep -q 'error'; then
              errors_for_file+="  $line\n"
              has_errors=true

              # Check for missing license header errors
              if echo "$line" | grep -q 'missing header'; then
                missing_lc_headers=true
                errors_for_file+="!Flagged: LC header missing\n"
                lc_flagged_files+="${current_file}\n"
              fi
            fi
          done <<< "$clean_output"

          # Add final file errors if any
          if [ "$has_errors" = true ]; then
            grouped_errors+="$current_file\n$errors_for_file\n"
          fi

          # Set environment variables for subsequent steps
          if [ -n "$grouped_errors" ]; then
            echo "ESLint errors found."
            echo "GROUPED_ERRORS<<EOF" >> $GITHUB_ENV
            echo -e "$grouped_errors" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "HAS_ERRORS=true" >> $GITHUB_ENV
          else
            echo "No ESLint errors found."
            echo "HAS_ERRORS=false" >> $GITHUB_ENV
          fi

          if [ "$missing_lc_headers" = true ]; then
            echo "Missing license headers detected."
            echo "MISSING_LC_HEADERS=true" >> $GITHUB_ENV
            echo "LC_FLAGGED_FILES<<EOF" >> $GITHUB_ENV
            echo -e "$(echo -e "$lc_flagged_files" | sed '/^\s*$/d')" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "All files have proper license headers."
            echo "MISSING_LC_HEADERS=false" >> $GITHUB_ENV
          fi

          # Always exit 0 here to allow the workflow to continue to the comment step
          exit 0

      # Comment on PR with comprehensive feedback
      - name: Comment on PR with ESLint Results
        if: github.event_name == 'pull_request' && (env.MISSING_LC_HEADERS == 'true' || env.HAS_ERRORS == 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const lintErrors = process.env.GROUPED_ERRORS;
            const issueNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            let commentBody = "";

            // Add license header issues if present
            if (process.env.MISSING_LC_HEADERS === 'true') {
              const flaggedFiles = process.env.LC_FLAGGED_FILES.trim();
              commentBody += `## üö® SPDX-License Header Errors\n\nThe following files are missing the required license headers:\n\n\`\`\`\n${flaggedFiles}\n\`\`\`\n\nPlease ensure each of these files includes a valid SPDX license identifier to maintain licensing compliance.\n`;
            }

            // Add ESLint errors if present
            if (lintErrors && process.env.HAS_ERRORS === 'true') {
              commentBody += `${commentBody ? '\n' : ''}## üìã Frontend ESLint Issues\n\nThe following ESLint issues were found:\n\n\`\`\`\n${lintErrors}\n\`\`\`\n\nPlease review and resolve these issues to maintain code quality standards.\n`;
            }

            // Post comment if there are issues to report
            if (commentBody.trim() && issueNumber) {
              try {
                await github.rest.issues.createComment({
                  issue_number: issueNumber,
                  owner: owner,
                  repo: repo,
                  body: commentBody
                });
                console.log("Comment posted successfully.");
              } catch (error) {
                console.error("Failed to post comment:", error);
              }
            } else {
              console.log("No issues to report in comment.");
            }

      # Fail workflow if critical issues are found
      - name: Fail Workflow for Critical Issues
        if: env.MISSING_LC_HEADERS == 'true'
        run: |
          echo "‚ùå Workflow failed due to missing SPDX license headers."
          echo "Please add proper license headers to all flagged files before merging."
          exit 1

      # Summary step for successful runs
      - name: Workflow Summary
        if: env.MISSING_LC_HEADERS == 'false' && env.HAS_ERRORS == 'false'
        run: |
          echo "‚úÖ All checks passed!"
          echo "- No missing license headers"
          echo "- No ESLint errors found"
          echo "Code quality standards maintained."